grunt> --Student Name: Liang Leran Jenny
grunt> --Student ID: 7063167
grunt> --Assignment 3 Task 3
grunt> 
grunt> --PART 1 LOAD TABLES
grunt> customers = load '/user/bigdata/customer.tbl' using PigStorage('|') as(CUSTOMER_ID:int,CUSTOMER_CODE:chararray,COMPANY_NAME:chararray,CONTACT_NAME:chararray,CONTACT_TITLE:chararray,CITY:chararray,REGION:chararray,POSTAL_CODE:chararray,COUNTRY:chararray,PHONE:chararray,FAX:chararray);
grunt> 
grunt> orders = load '/user/bigdata/order.tbl' using PigStorage('|') as (ORDER_ID:int,ORDER_DATE:chararray,SHIP_VIA:chararray,SHIP_CITY:chararray,SHIP_REGION:chararray,SHIP_POSTAL_CODE:chararray,SHIP_COUNTRY:chararray);
grunt> 
grunt> order_details = load '/user/bigdata/order_detail.tbl' using PigStorage('|') as (ORDER_ID:int,PRODUCT_ID:int,CUSTOMER_ID:int,SALESPERSON_ID:int,UNIT_PRICE:double,QUANTITY:int,DISCOUNT:double);                                                                                                                                                                                                                                                                                                                                                                                                                             
grunt> 
grunt> products = load '/user/bigdata/product.tbl' using PigStorage('|') as (
>> PRODUCT_ID:int,PRODUCT_NAME:chararray,UNIT_PRICE:double,
>> UNITS_IN_STOCK:int,UNITS_ON_ORDER:int,DISCONTINUED:chararray);
grunt> 
grunt> salespersons = load '/user/bigdata/salesperson.tbl' using PigStorage('|') as (
>> EMPLOYEE_ID:int,LASTNAME:chararray,FIRSTNAME:chararray,TITLE:chararray,
>> BIRTHDATE:chararray,HIREDATE:chararray,NOTES:chararray);
grunt> 
grunt> --PART 2
grunt> --filter out Mexico customers
grunt> mexico_cus = filter customers by COUNTRY == 'Mexico';
grunt> 
grunt> --join filtered customer table with order_details and salespersons
grunt> mexico_joins_orderdetails = join mexico_cus by CUSTOMER_ID, order_details by CUSTOMER_ID;
grunt> mexicoorder_joins_salespersons = join mexico_joins_orderdetails by SALESPERSON_ID, salespersons by EMPLOYEE_ID;
grunt> 
grunt> --get salesperson firstname and lastname
grunt> firstname_lastname = foreach mexicoorder_joins_salespersons generate FIRSTNAME, LASTNAME;
grunt> 
grunt> --remove duplicates
grunt> distinct_names = distinct firstname_lastname;
grunt> 
grunt> dump distinct_names;
(Janet,Leverling)
(Laura,Callahan)
(Nancy,Davolio)
(Andrew,Fuller)
(Robert,King)
(Steven,Buchanan)
(Margaret,Peacock)
grunt> 
grunt> --PART 3
grunt> --split date string
grunt> date_split = foreach orders generate ORDER_ID,flatten(STRSPLIT(ORDER_DATE,'-')) as (DAY:int,MONTH:chararray,YEAR:chararray);
grunt> 
grunt> --filter out orders made in 1996
grunt> orders1996 = filter date_split by YEAR == '1996';
grunt> 
grunt> --join filtered orders table with order_details and salespersons
grunt> orders1996_join_orderdetails = join orders1996 by ORDER_ID, order_details by ORDER_ID;
grunt> orders1996_join_salesperson = join orders1996_join_orderdetails by SALESPERSON_ID, salespersons by EMPLOYEE_ID;
grunt> 
grunt> --only show employee_id
grunt> salespersons1996 = foreach orders1996_join_salesperson generate EMPLOYEE_ID;
grunt> 
grunt> --get number of salesperson
grunt> num_1996 = foreach (GROUP salespersons1996 ALL){
>> distinct1996 = distinct salespersons1996;
>> generate COUNT(distinct1996) as num_1996_salesperson;};
grunt> dump num_1996;
(9)
grunt> 
grunt> --PART 4
grunt> --I have assumed that the question is asking for a summary of unit prices of ordered product
grunt> --Eg. PRODUCT_ID 1: Chai, UNIT_PRICES: 18.0 and 14.4
grunt> --Assumed result (1, {(18.0), (14.4)})
grunt> 
grunt> --find prices corresponding to each ordered product
grunt> summarization = foreach order_details generate PRODUCT_ID, UNIT_PRICE;
grunt> --remove duplicates
grunt> distinct_summ = distinct summarization;
grunt> summ = group distinct_summ by PRODUCT_ID;
grunt> results = foreach summ generate group, distinct_summ.UNIT_PRICE;
grunt> dump summ;
(1,{(18.0),(14.4)})
(2,{(15.2),(19.0)})
(3,{(8.0),(10.0)})
(4,{(17.6),(22.0)})
(5,{(21.35),(17.0)})
(6,{(20.0),(25.0)})
(7,{(24.0),(30.0)})
(8,{(32.0),(40.0)})
(9,{(77.6),(97.0)})
(10,{(24.8),(31.0)})
(11,{(16.8),(14.0),(21.0)})
(12,{(30.4),(38.0)})
(13,{(4.8),(6.0)})
(14,{(23.25),(18.6)})
(15,{(12.4),(15.5)})
(16,{(13.9),(17.45)})
(17,{(31.2),(39.0)})
(18,{(50.0),(62.5)})
(19,{(9.2),(7.3)})
(20,{(64.8),(81.0)})
(21,{(8.0),(10.0)})
(22,{(16.8),(21.0)})
(23,{(7.2),(9.0)})
(24,{(4.5),(3.6)})
(25,{(11.2),(14.0)})
(26,{(24.9),(31.23)})
(27,{(35.1),(43.9)})
(28,{(36.4),(45.6)})
(29,{(123.79),(99.0)})
(30,{(25.89),(20.7)})
(31,{(10.0),(12.5)})
(32,{(25.6),(32.0)})
(33,{(2.0),(2.5)})
(34,{(14.0),(11.2)})
(35,{(14.4),(18.0)})
(36,{(15.2),(19.0)})
(37,{(20.8),(26.0)})
(38,{(210.8),(263.5)})
(39,{(14.4),(18.0)})
(40,{(18.4),(14.7)})
(41,{(7.7),(9.65)})
(42,{(9.8),(11.2),(14.0)})
(43,{(46.0),(36.8)})
(44,{(15.5),(19.45)})
(45,{(7.6),(9.5)})
(46,{(9.6),(12.0)})
(47,{(7.6),(9.5)})
(48,{(12.75),(10.2)})
(49,{(20.0),(16.0)})
(50,{(13.0),(16.25)})
(51,{(42.4),(53.0)})
(52,{(5.6),(7.0)})
(53,{(32.8),(26.2)})
(54,{(5.9),(7.45)})
(55,{(19.2),(24.0)})
(56,{(30.4),(38.0)})
(57,{(15.6),(19.5)})
(58,{(13.25),(10.6)})
(59,{(44.0),(55.0)})
(60,{(27.2),(34.0)})
(61,{(22.8),(28.5)})
(62,{(39.4),(49.3)})
(63,{(43.9),(35.1)})
(64,{(26.6),(33.25)})
(65,{(16.8),(21.05)})
(66,{(13.6),(17.0)})
(67,{(11.2),(14.0)})
(68,{(12.5),(10.0)})
(69,{(36.0),(28.8)})
(70,{(12.0),(15.0)})
(71,{(17.2),(21.5)})
(72,{(27.8),(34.8)})
(73,{(15.0),(12.0)})
(74,{(8.0),(10.0)})
(75,{(6.2),(7.75)})
(76,{(14.4),(18.0)})
(77,{(10.4),(13.0)})

grunt> 
grunt> --PART 5
grunt> --filter orders by ikura and tofu
grunt> ikura = filter products by PRODUCT_NAME == 'Ikura';
grunt> tofu = filter products by PRODUCT_NAME == 'Tofu';
grunt> ikura_orders = filter order_details by PRODUCT_ID == ikura.PRODUCT_ID;
grunt> tofu_orders = filter order_details by PRODUCT_ID == tofu.PRODUCT_ID;
grunt> 
grunt> --only get order_id for ikura and tofu
grunt> ikura_orderid = foreach ikura_orders generate ORDER_ID;
grunt> tofu_orderid = foreach tofu_orders generate ORDER_ID;
grunt> 
grunt> --join to find order with both ikura and tofu
grunt> orders_tgt = join ikura_orderid by ORDER_ID, tofu_orderid by ORDER_ID;
grunt> 
grunt> --show order_id
grunt> distinct_orders = foreach orders_tgt generate ikura_orderid::ORDER_ID;
grunt> dump distinct_orders;
(11077)
grunt> 
grunt> 
